{"version":3,"file":"main.min.js","mappings":"SAAA;SACA;;;;;UCDA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;;;;ACA4B;AAC5B;AACe;AACf;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA,wEAAwE,cAAc;AACtF;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA,0DAA0D,eAAe;AACzE,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D,sDAAsD,eAAe;AACrE,mDAAmD,eAAe;AAClE,oDAAoD,eAAe;AACnE,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA,gEAAgE,eAAe;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,uDAAuD,eAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,eAAe;AACtE,oDAAoD,eAAe;AACnE,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc;AACd,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wBAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,qBAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C","sources":["webpack://custom_select/webpack/bootstrap","webpack://custom_select/webpack/runtime/define property getters","webpack://custom_select/webpack/runtime/hasOwnProperty shorthand","webpack://custom_select/./src/select.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import './scss/styles.scss';\r\n\r\nexport default class Select {\r\n    constructor(config) {\r\n        if (!config.select) return console.log('provide id of select element');\r\n        this.select = document.querySelector(`#${config.select}`);\r\n        this.isMulti = this.select.multiple;\r\n        if (!this.select) return console.log(`select element with id '${config.select}' not found`);\r\n\r\n        this.idSelect = `c-select${this.uniqueID()}`;\r\n        this.options = this.select.querySelectorAll('option');\r\n\r\n        this.createHTML();\r\n        this.createOptionList();\r\n\r\n        this.firstOptionItem = document.querySelector(`#${this.idSelect} .c-select__dropdown-item:first-of-type`);\r\n        this.selectOptions = document.querySelectorAll(`#${this.idSelect} option`);\r\n\r\n        this.setEventListeners(config);\r\n        this.filterOptionItems();\r\n\r\n        this.input = document.querySelector(`#${this.idSelect} .c-select__input`);\r\n        this.selectedDiv = document.querySelector(`#${this.idSelect} .c-select__selected`);\r\n        this.inputDiv = document.querySelector(`#${this.idSelect} .c-select__input-div`);\r\n        this.arrowIcon = document.querySelector(`#${this.idSelect} .c-select__arrow-icon`);\r\n        this.dropdown = document.querySelector(`#${this.idSelect} .c-select__dropdown`);\r\n        this.SPACEBAR_KEY_CODE = 32;\r\n        this.ENTER_KEY_CODE = 13;\r\n        this.UP_KEY_CODE = 38;\r\n        this.DOWN_KEY_CODE = 40;\r\n        this.dropdownItems = document.querySelectorAll(`#${this.idSelect} .c-select__dropdown-item`);\r\n    }\r\n\r\n    uniqueID() {\r\n        return Math.floor(Math.random() * Date.now()).toString();\r\n    }\r\n\r\n    getSelectedItems() {\r\n        return document.querySelectorAll(`#${this.idSelect} .c-select__selected-div`);\r\n    }\r\n\r\n    removeElem(elemToRemove) {\r\n        elemToRemove ? elemToRemove.remove() : null;\r\n    }\r\n\r\n    createOptionList() {\r\n        for (let i = 1; i < this.options.length; i++) {\r\n            const optionItem = document.createElement('li');\r\n            const dropdownItemList = document.querySelector(`#${this.idSelect} .c-select__dropdown`);\r\n            optionItem.classList.add(\"c-select__dropdown-item\");\r\n            optionItem.textContent = this.options[i].value;\r\n            optionItem.tabIndex = '0';\r\n            dropdownItemList.appendChild(optionItem);\r\n        }\r\n    }\r\n\r\n    setEventListeners() {\r\n        document.querySelector(`#${this.idSelect} .c-select__option-list`)\r\n            .addEventListener('click', (e) => this.handleClick(e));\r\n\r\n        document.querySelector('body')\r\n            .addEventListener('click', (e) => this.handleOutsideClick(e));\r\n\r\n        document.querySelectorAll(`#${this.idSelect} .c-select__dropdown-item`)\r\n            .forEach(item => item.addEventListener(\"keydown\", (e) => this.handleKeyboard(e)));\r\n\r\n        document.querySelectorAll(`.c-select__dropdown-item`).forEach(item => {\r\n            item.addEventListener('focus', (e) => e.target.focus());\r\n        });\r\n    }\r\n\r\n    handleClick(e) {\r\n        const activeSelects = document.querySelectorAll(`.c-select__option-list .active`);\r\n\r\n        if (e.target.classList.contains('c-select__selected') ||\r\n            e.target.classList.contains('c-select__arrow') ||\r\n            e.target.classList.contains('c-select__arrow-icon')) {\r\n            this.input.value = '';\r\n            this.input.dispatchEvent(new Event('input'));\r\n            this.selectedDiv.classList.toggle('active');\r\n            this.inputDiv.classList.toggle('active');\r\n            this.arrowIcon.classList.toggle('active');\r\n            this.dropdown.classList.toggle('active');\r\n\r\n            if (activeSelects.length >= 4) {\r\n                activeSelects.forEach(select => {\r\n                    select.dataset.id !== this.idSelect && select.classList.toggle('active');\r\n                });\r\n            }\r\n        }\r\n\r\n        e.target.classList.contains('c-select__dropdown-item') &&\r\n            this.handleOptionItemsClick(e, this.selectedDiv);\r\n\r\n        e.currentTarget.classList.contains('c-select__selected-remove') ||\r\n            e.currentTarget.classList.contains('c-select__selected-remove_single') ?\r\n            this.handleSelectedClick(e, this.selectOptions) : null;      \r\n    }\r\n\r\n    handleSelectedClick(e, selectOptions) {\r\n        const selectedItemTextContent = !this.isMulti ? this.getSelectedItems()[0].textContent : \r\n        e.currentTarget.previousSibling.textContent;\r\n        const elemToRemove = !this.isMulti ? this.getSelectedItems()[0] : e.currentTarget.parentElement;\r\n        const removeSingleBtn = document.querySelector(`#${this.idSelect} .c-select__selected-remove_single`);\r\n\r\n        removeSingleBtn ? removeSingleBtn.classList.add('scale-down') : null;\r\n        elemToRemove.classList.add('scale-down');\r\n        //setInterval for scaleDown animation\r\n        setInterval(()=> {\r\n            this.removeElem(elemToRemove);\r\n            !this.isMulti ? this.removeElem(removeSingleBtn) : null;\r\n        }, 280);\r\n\r\n        const selectedDropdownItems = document.querySelectorAll('.c-select__dropdown-item_selected');\r\n\r\n        [...selectOptions].find(option => {\r\n            return option.value === selectedItemTextContent;\r\n        }).selected = false;\r\n        [...selectedDropdownItems].find(item => item.textContent === elemToRemove.textContent)\r\n            .classList.remove('c-select__dropdown-item_selected');\r\n    }\r\n\r\n    handleOptionItemsClick(e, selectedDiv) {\r\n        if (e.target === this.firstOptionItem) return;\r\n        const selectedArr = [];\r\n        const selectedItems = selectedDiv.querySelectorAll('.c-select__selected-div');\r\n        selectedItems.forEach(elem => selectedArr.push(elem.textContent));\r\n        !selectedArr.includes(e.target.textContent) &&\r\n            this.addToSelected(e, this.selectOptions, selectedDiv, selectedItems);\r\n        e.target.classList.add('c-select__dropdown-item_selected');\r\n    }\r\n\r\n    addToSelected(e, selectOptions, selectedDiv, selectedItems) {\r\n        if (!this.isMulti && selectedItems.length > 0) this.handleSingleSelect(selectedItems);\r\n\r\n        [...selectOptions].find(option => option.value === e.target.textContent).selected = true;\r\n        const selectedItemDiv = document.createElement('div');\r\n        const selectedItemP = document.createElement('p');\r\n        selectedItemDiv.classList.add('c-select__selected-div');\r\n        selectedItemP.classList.add('c-select__selected-p');\r\n        selectedItemP.textContent = e.target.textContent;\r\n        selectedItemDiv.appendChild(selectedItemP);\r\n        const removeItemBtn = document.createElement('button');\r\n        \r\n        removeItemBtn.addEventListener('click', (e) => this.handleClick(e));\r\n\r\n        if (this.isMulti) {\r\n            removeItemBtn.classList.add('c-select__selected-remove');\r\n            removeItemBtn.innerHTML = `<svg viewBox=\"-2 3 24 24\" fill=\"none\"><path d=\"M19 5L5 19M5.00001 5L19 19\"\r\n            stroke=\"#ffffff\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>`;\r\n            selectedItemDiv.appendChild(removeItemBtn);\r\n        } else {\r\n            this.removeElem(document.querySelector(`#${this.idSelect} .c-select__selected-remove_single`));\r\n            removeItemBtn.classList.add('c-select__selected-remove_single');\r\n            removeItemBtn.innerHTML = `<svg viewBox=\"0 2 24 24\" fill=\"none\"><path d=\"M19 5L5 19M5.00001 5L19 19\"\r\n            stroke=\"#000000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>`;\r\n            this.selectedDiv.appendChild(removeItemBtn);\r\n        }\r\n        \r\n        selectedDiv.appendChild(selectedItemDiv);\r\n    }\r\n\r\n    handleSingleSelect(selectedItems) {\r\n        const selectedDropdownItem = document.querySelector('.c-select__dropdown-item_selected');\r\n        selectedDropdownItem.classList.remove('c-select__dropdown-item_selected');\r\n        this.removeElem(selectedItems[0]);\r\n    }\r\n\r\n    handleOutsideClick(e) {\r\n        const selectedDiv = document.querySelector(`#${this.idSelect} .c-select__selected`);\r\n        const inputDiv = document.querySelector(`#${this.idSelect} .c-select__input-div`);\r\n        const arrowIcon = document.querySelector(`#${this.idSelect} .c-select__arrow-icon`);\r\n\r\n        if (selectedDiv.classList.contains('active')) {\r\n            if (this.isClickedOutside(e)) {\r\n                selectedDiv.classList.remove('active');\r\n                inputDiv.classList.remove('active');\r\n                arrowIcon.classList.remove('active');\r\n                this.dropdown.classList.remove('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    isClickedOutside(e) {\r\n        const classListArr = [\r\n            'c-select__selected',\r\n            'c-select__input-div',\r\n            'c-select__input',\r\n            'c-select__dropdown-item',\r\n            'c-select__dropdown',\r\n            'c-select__arrow',\r\n            'c-select__arrow-icon',\r\n            'c-select__selected-div',\r\n            'c-select__selected-p',\r\n            'c-select__selected-remove'\r\n        ];\r\n        this.isOutside = true;\r\n        classListArr.forEach(item => e.target.classList.contains(item) ? this.isOutside = false : undefined);\r\n        return this.isOutside;\r\n    }\r\n\r\n    handleKeyboard(e) {\r\n        if (!e.target.classList.contains('c-select__dropdown-item')) return;\r\n    \r\n        e.keyCode === this.ENTER_KEY_CODE || e.keyCode === this.SPACEBAR_KEY_CODE ? this.handleClick(e) : null;\r\n    \r\n        if (e.keyCode === this.UP_KEY_CODE) {\r\n            this.dropdownItems.forEach((item, index) => {\r\n                if (item === e.target) {\r\n                    index > 1 ? this.dropdownItems[index - 1].dispatchEvent(new Event('focus'))\r\n                        : this.dropdownItems[this.dropdownItems.length - 1]\r\n                            .dispatchEvent(new Event('focus'));\r\n                }\r\n            });\r\n        }\r\n    \r\n        if (e.keyCode === this.DOWN_KEY_CODE) {\r\n            this.dropdownItems.forEach((item, index) => {\r\n                if (item === e.target) {\r\n                    index < this.dropdownItems.length - 1 ? this.dropdownItems[index + 1]\r\n                        .dispatchEvent(new Event('focus'))\r\n                        : this.dropdownItems[1].dispatchEvent(new Event('focus'));\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    filterOptionItems() {\r\n        const input = document.querySelector(`#${this.idSelect} .c-select__input`);\r\n        input.addEventListener('input', (e) => {\r\n    \r\n            this.dropdownItems.forEach((item, index) => {\r\n                !item.textContent.toLowerCase().includes(e.target.value.toLowerCase()) && index !== 0\r\n                    ? item.classList.add('isHidden') :\r\n                    item.classList.remove('isHidden');\r\n            });\r\n    \r\n            if ([...this.dropdownItems]\r\n                .filter(elem => elem.classList.contains('isHidden')).length === this.dropdownItems.length - 1) {\r\n                this.firstOptionItem.textContent = 'no results';\r\n            } else this.firstOptionItem.textContent = '';\r\n        });\r\n    }\r\n\r\n    createHTML() {\r\n        const classList = {\r\n            wrapper: 'c-select',\r\n            optionList: 'c-select__option-list',\r\n            selected: 'c-select__selected',\r\n            inputDiv: 'c-select__input-div',\r\n            input: 'c-select__input',\r\n            dropdown: 'c-select__dropdown',\r\n            dropdownItem: 'c-select__dropdown-item',\r\n            arrow: 'c-select__arrow',\r\n            selectedDiv: 'c-select__selected-div',\r\n        };\r\n    \r\n        const inputElem = this.createElement('input', classList.input, [['type', 'text']]);\r\n        const ulElem =  this.createElement('ul', classList.dropdown, [['data-id', this.idSelect]]);\r\n        const liElem =  this.createElement('li', classList.dropdownItem);\r\n        ulElem.appendChild(liElem);\r\n    \r\n        let divElem =  this.createElement('div', classList.wrapper);\r\n        divElem.style.width = `${this.select.offsetWidth}px`;\r\n        this.select.parentNode.insertBefore(divElem, this.select);\r\n        divElem.appendChild(this.select);\r\n        this.select.classList.add(\"select-hidden\");\r\n    \r\n        const wrapper = divElem;\r\n        wrapper.id = this.idSelect;\r\n        divElem = this.createElement('div', classList.optionList);\r\n        wrapper.appendChild(divElem);\r\n        const optionList = wrapper.querySelector(`.${classList.optionList}`);\r\n        divElem =  this.createElement('div', classList.selected, [['data-id', this.idSelect]]);\r\n    \r\n        //if single select add specific class\r\n        !this.isMulti ? divElem.classList.add('c-select__selected_single') : null;\r\n    \r\n        optionList.appendChild(divElem);\r\n        const selected = optionList.querySelector(`.${classList.selected}`);\r\n        divElem =  this.createElement('div', classList.arrow);\r\n        divElem.innerHTML = `<svg width=\"14px\" height=\"14px\" viewBox=\"0 0 1024 1024\" class=\"c-select__arrow-icon\" \r\n        data-id = ${this.idSelect}><path d=\"M903.232 256l56.768 50.432L512 768 64 306.432 120.768 256 512 659.072z\"\r\n        fill=\"#000000\" /></svg>`;\r\n        selected.appendChild(divElem);\r\n        divElem =  this.createElement('div', classList.inputDiv, [['data-id', this.idSelect]]);\r\n        optionList.appendChild(divElem);\r\n        const inputDiv = optionList.querySelector(`.${classList.inputDiv}`);\r\n        inputDiv.appendChild(inputElem);\r\n        inputDiv.appendChild(ulElem);\r\n    }\r\n    \r\n    createElement(tagName, className, attrList) {\r\n        const newElem = document.createElement(tagName);\r\n        if (className) newElem.className = className;\r\n        if (!attrList) return newElem;\r\n        for (const attr of attrList) newElem.setAttribute(attr[0], attr[1]);\r\n        return newElem;\r\n    }\r\n}"],"names":[],"sourceRoot":""}